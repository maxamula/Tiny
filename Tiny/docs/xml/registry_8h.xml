<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="registry_8h" kind="file" language="C++">
    <compoundname>registry.h</compoundname>
    <includes local="no">memory</includes>
    <includes refid="shaderfx_8h" local="yes">shaderfx.h</includes>
    <includedby refid="stdmat_8cpp" local="yes">content/stdmat.cpp</includedby>
    <includedby refid="registry_8cpp" local="yes">fx/registry.cpp</includedby>
    <includedby refid="registry__internal_8h" local="yes">fx/registry_internal.h</includedby>
    <incdepgraph>
      <node id="10">
        <label>../entt.hpp</label>
      </node>
      <node id="1">
        <label>fx/registry.h</label>
        <link refid="registry_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shaderfx.h</label>
        <link refid="shaderfx_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>DirectXMath.h</label>
      </node>
      <node id="6">
        <label>atlbase.h</label>
      </node>
      <node id="4">
        <label>d3d12.h</label>
      </node>
      <node id="11">
        <label>d3dx12.hpp</label>
      </node>
      <node id="5">
        <label>dxcapi.h</label>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
      <node id="8">
        <label>stdexcept</label>
      </node>
      <node id="7">
        <label>unordered_map</label>
      </node>
      <node id="12">
        <label>variant</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>content/assets.cpp</label>
        <link refid="assets_8cpp"/>
      </node>
      <node id="2">
        <label>content/stdmat.cpp</label>
        <link refid="stdmat_8cpp"/>
      </node>
      <node id="3">
        <label>fx/registry.cpp</label>
        <link refid="registry_8cpp"/>
      </node>
      <node id="1">
        <label>fx/registry.h</label>
        <link refid="registry_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>fx/registry_internal.h</label>
        <link refid="registry__internal_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>fx/shaderfx.cpp</label>
        <link refid="shaderfx_8cpp"/>
      </node>
      <node id="7">
        <label>graphics/renderctx.cpp</label>
        <link refid="renderctx_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacetiny">tiny</innernamespace>
    <innernamespace refid="namespacetiny_1_1fx">tiny::fx</innernamespace>
    <innernamespace refid="namespaceentt">entt</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="registry_8h_1a3f2864ad750efcc488b87d785182aa83" prot="public" static="no">
        <name>TINY_REGISTER_MATERIAL</name>
        <param><defname>INITIALIZER</defname></param>
        <param><defname>INSTANCE_TYPE</defname></param>
        <initializer>void INITIALIZER(ID3D12Device*, <ref refid="structtiny_1_1fx_1_1_material" kindref="compound">tiny::fx::Material</ref>&amp;); struct INSTANCE_TYPE; namespace { const u8 _reg##INSTANCE_TYPE{<ref refid="namespacetiny_1_1fx_1a4c111c317a63b98bf44782ae3b0451d9" kindref="member">tiny::fx::RegisterMaterial</ref>(#INSTANCE_TYPE##_hs, &amp;INITIALIZER, &amp;<ref refid="namespacetiny_1_1fx_1a2b8a8179fb6d52f678363fee863423de" kindref="member">tiny::fx::MaterialInstanceFactory</ref>&lt;INSTANCE_TYPE&gt;)};}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fx/registry.h" line="7" column="9" bodyfile="fx/registry.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="registry_8h_1a37cb179a50b222ea093d5be01da3aeac" prot="public" static="no">
        <name>TINY_REGISTER_MESH_MATERIAL</name>
        <param><defname>INITIALIZER</defname></param>
        <param><defname>INSTANCE_TYPE</defname></param>
        <initializer>void INITIALIZER(ID3D12Device*, <ref refid="structtiny_1_1fx_1_1_mesh_material" kindref="compound">tiny::fx::MeshMaterial</ref>&amp;); struct INSTANCE_TYPE; namespace { const u8 _reg##INSTANCE_TYPE{<ref refid="namespacetiny_1_1fx_1a449f348d799f8a645180aa5224fae42c" kindref="member">tiny::fx::RegisterMeshMaterial</ref>(#INSTANCE_TYPE##_hs, &amp;INITIALIZER, &amp;<ref refid="namespacetiny_1_1fx_1a3bb86e269946007f7e8e4c2be8136b5d" kindref="member">tiny::fx::MeshMaterialInstanceFactory</ref>&lt;INSTANCE_TYPE&gt;)};}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fx/registry.h" line="8" column="9" bodyfile="fx/registry.h" bodystart="8" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shaderfx_8h" kindref="compound">shaderfx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">entt;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="registry_8h_1a3f2864ad750efcc488b87d785182aa83" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINY_REGISTER_MATERIAL(INITIALIZER,<sp/>INSTANCE_TYPE)<sp/>void<sp/>INITIALIZER(ID3D12Device*,<sp/>tiny::fx::Material&amp;);<sp/>struct<sp/>INSTANCE_TYPE;<sp/>namespace<sp/>{<sp/>const<sp/>u8<sp/>_reg##INSTANCE_TYPE{tiny::fx::RegisterMaterial(#INSTANCE_TYPE##_hs,<sp/>&amp;INITIALIZER,<sp/>&amp;tiny::fx::MaterialInstanceFactory&lt;INSTANCE_TYPE&gt;)};}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="registry_8h_1a37cb179a50b222ea093d5be01da3aeac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TINY_REGISTER_MESH_MATERIAL(INITIALIZER,<sp/>INSTANCE_TYPE)<sp/>void<sp/>INITIALIZER(ID3D12Device*,<sp/>tiny::fx::MeshMaterial&amp;);<sp/>struct<sp/>INSTANCE_TYPE;<sp/>namespace<sp/>{<sp/>const<sp/>u8<sp/>_reg##INSTANCE_TYPE{tiny::fx::RegisterMeshMaterial(#INSTANCE_TYPE##_hs,<sp/>&amp;INITIALIZER,<sp/>&amp;tiny::fx::MeshMaterialInstanceFactory&lt;INSTANCE_TYPE&gt;)};}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetiny_1_1fx" kindref="compound">tiny::fx</ref></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12" refid="namespacetiny_1_1fx_1a6bd9a295b6079d943cd9af9b51e44422" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetiny_1_1fx_1a6bd9a295b6079d943cd9af9b51e44422" kindref="member">fnMaterialInitializer</ref><sp/>=<sp/>void(*)(ID3D12Device*<sp/>pDevice,<sp/><ref refid="structtiny_1_1fx_1_1_material" kindref="compound">Material</ref>&amp;<sp/>mat);</highlight></codeline>
<codeline lineno="13" refid="namespacetiny_1_1fx_1ae87e351d57ff1333afe1f08ae2bd1be2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetiny_1_1fx_1ae87e351d57ff1333afe1f08ae2bd1be2" kindref="member">fnMeshMaterialInitializer</ref><sp/>=<sp/>void(*)(ID3D12Device*<sp/>pDevice,<sp/><ref refid="structtiny_1_1fx_1_1_mesh_material" kindref="compound">MeshMaterial</ref>&amp;<sp/>mat);</highlight></codeline>
<codeline lineno="14" refid="namespacetiny_1_1fx_1a3600761e86b5350b1e6429bb740dc3f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetiny_1_1fx_1a3600761e86b5350b1e6429bb740dc3f4" kindref="member">fnMaterialFactory</ref><sp/>=<sp/>std::shared_ptr&lt;fx::IMaterialInstance&gt;(*)();</highlight></codeline>
<codeline lineno="15" refid="namespacetiny_1_1fx_1ad23ba76794ce90cd692edc000db902ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetiny_1_1fx_1ad23ba76794ce90cd692edc000db902ec" kindref="member">fnMeshMaterialFactory</ref><sp/>=<sp/>std::shared_ptr&lt;fx::IMeshMaterialInstance&gt;(*)();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>TINYFX_API<sp/>u8<sp/><ref refid="namespacetiny_1_1fx_1a4c111c317a63b98bf44782ae3b0451d9" kindref="member">RegisterMaterial</ref>(u64<sp/>instanceId,<sp/><ref refid="namespacetiny_1_1fx_1a6bd9a295b6079d943cd9af9b51e44422" kindref="member">fnMaterialInitializer</ref><sp/>initializer,<sp/><ref refid="namespacetiny_1_1fx_1a3600761e86b5350b1e6429bb740dc3f4" kindref="member">fnMaterialFactory</ref><sp/>factory);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>TINYFX_API<sp/>u8<sp/><ref refid="namespacetiny_1_1fx_1a449f348d799f8a645180aa5224fae42c" kindref="member">RegisterMeshMaterial</ref>(u64<sp/>instanceId,<sp/><ref refid="namespacetiny_1_1fx_1ae87e351d57ff1333afe1f08ae2bd1be2" kindref="member">fnMeshMaterialInitializer</ref><sp/>initializer,<sp/><ref refid="namespacetiny_1_1fx_1ad23ba76794ce90cd692edc000db902ec" kindref="member">fnMeshMaterialFactory</ref><sp/>factory);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="21" refid="namespacetiny_1_1fx_1a2b8a8179fb6d52f678363fee863423de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;fx::IMaterialInstance&gt;<sp/><ref refid="namespacetiny_1_1fx_1a2b8a8179fb6d52f678363fee863423de" kindref="member">MaterialInstanceFactory</ref>()</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;T&gt;();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="27" refid="namespacetiny_1_1fx_1a3bb86e269946007f7e8e4c2be8136b5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;fx::IMeshMaterialInstance&gt;<sp/><ref refid="namespacetiny_1_1fx_1a3bb86e269946007f7e8e4c2be8136b5d" kindref="member">MeshMaterialInstanceFactory</ref>()</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;T&gt;();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="fx/registry.h"/>
  </compounddef>
</doxygen>
